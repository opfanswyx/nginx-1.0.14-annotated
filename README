Documentation is available at http://nginx.org

nginx-1.0.14 源码学习与注释

```
main()   @ src/core/nginx.c
 |-ngx_debug_init()
 |-ngx_strerror_init()                         // 初始化错误提示列表，以errno为下标，元素就是对应的错误提示信息
 |-ngx_get_options()                           // 解析命令参数
 |-ngx_time_init()                             // 初始化并更新时间，如全局变量ngx_cached_time
 |-ngx_regex_init()                            // 正则表达式的初始化
 |-ngx_log_init()                              // 初始化日志
 |-ngx_create_pool()                           // 创建以1024大小的cycle内存块
 |-ngx_save_argv()                             // 保存命令行参数，方便后面进行热代码替换
 |-ngx_process_options()                       // 处理配置文件相关信息，并初始化cycle
 |-ngx_os_init()                               // 处理操作系统相关初始化
 |-ngx_crc32_table_init()                      // 初始化循环冗余检验表
 |-ngx_add_inherited_sockets()                 // 通过环境变量NGINX完成socket的继承
 |-... ...                                     // +++包括了对ngx_modules[]的index初始化
 |-ngx_init_cycle()                            // 主要的初始化过程
 | |-gethostname()                             // 获取设置hostname
 | |-... ...                                   // 调用core-modules的create_conf()函数，并准备解析配置文件的数据结构
 | |-ngx_conf_param()                          // -g参数的解析
 | |-ngx_conf_parse()                          // 解析配置文件
 | | |-ngx_conf_handler()
 | |-... ...                                   // 调用core-modules的init_conf()函数
 | |-ngx_create_pidfile()                      // 创建PID文件
 | |-... ...                                   // 创建文件路径、打开文件描述符以及创建共享内存
 | |-ngx_open_listening_sockets()              // 打开所有的监听socket
 | | |-ngx_socket()                            // 创建socket套接字
 | | |-setsockopt()                            // 设置可重用
 | | |-ngx_nonblocking()                       // 设置为非阻塞
 | | |-bind()                                  // 绑定要监听的socket地址
 | | |-listen()                                // 监听socket
 | |-... ...                                   // 调用所有模块的init_module()函数
 |-ngx_init_signals()                          // 设置信号处理函数
 |
 |-ngx_single_process_cycle()                  // 如果是单进程
 |-ngx_master_process_cycle()                  // 以master方式运行多进程，主要解析该流程
   |-ngx_start_worker_processes()
   | |-ngx_spawn_process()                     // 创建子进程ngx_worker_process_cycle()
   |   |
   |   |-ngx_worker_process_cycle()            // worker的主要处理流程，子进程处理流程
   |     |-ngx_worker_process_init()           // 初始化
   |     | |-... ...                           // 设置执行环境、优先级等参数
   |     | |-ngx_modules[i]->init_process()    // 调用所有模块的初始化回调函数
   |     | |-... ...                           // 关闭不使用的socket
   |     |-ngx_setproctitle()                  // 设置进程名称worker process，然后接下来是死循环
   |     |
   |     |-... ...                             // 通过ngx_exiting判断，如果进程退出，关闭所有连接
   |     |-ngx_process_events_and_timers()     // 处理事件和计时，处理惊群现象
   |     | |-... ...                           // 在此会通过ngx_use_accept_mutex防止惊群
   |     | |-ngx_process_events()              // 实际调用ngx_event_actions.process_events()
   |     | |-ngx_event_process_posted()
   |     |-... ...                             // 处理终止、退出、重新打开命令
   |
   |-ngx_start_cache_manager_processes()
```